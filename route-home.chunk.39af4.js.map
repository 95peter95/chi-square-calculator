{"version":3,"sources":["webpack:///route-home.chunk.39af4.js","webpack:///./routes/home/style.css","webpack:///./routes/home/index.js","webpack:///../node_modules/bigbinom/lib/bigbinom.js","webpack:///../node_modules/bignumber.js/bignumber.js"],"names":["webpackJsonp","ZAL5","module","exports","home","iOg+","__webpack_exports__","__webpack_require__","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","TypeError","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","defineProperty","__WEBPACK_IMPORTED_MODULE_0_preact__","__WEBPACK_IMPORTED_MODULE_1__style__","n","__WEBPACK_IMPORTED_MODULE_1__style___default","__WEBPACK_IMPORTED_MODULE_2_bigbinom__","__WEBPACK_IMPORTED_MODULE_2_bigbinom___default","sumStrings","str1","str2","Number","parseFloat","getExpected","str3","toFixed","getRelative","getResidual","Math","pow","getChisquare","str4","getPhisquare","isSignificant","chisquare","getFisher","bn1","BigBinom","bn2","bn3","times","dividedBy","_ref","_ref2","_ref3","_ref4","_ref5","_ref6","Home","_Component","_temp","_this","_ret","_len","arguments","length","args","Array","_key","this","apply","concat","state","observed","row1","row2","row3","row4","expected","relative","residual","phisquare","fisher","step","setValues","e","columnIndex","index","newRow","target","setState","onSumExpected","_this$state","o","rel","r","chi","phi","fish","console","log","render","_this2","_state","class","style","disabled","type","onChange","onClick","Component","ukom","BigNumber","require","k","cf","i","vrSf","__WEBPACK_AMD_DEFINE_RESULT__","clone","configObject","v","b","alphabet","c","caseChanged","isNum","len","str","x","_isBigNumber","s","MAX_EXP","MIN_EXP","slice","String","isNumeric","test","parseNumeric","charCodeAt","indexOf","replace","search","substring","intCheck","ALPHABET","round","DECIMAL_PLACES","ROUNDING_MODE","DEBUG","Error","tooManyDigits","charAt","toUpperCase","toLowerCase","convertBase","MAX_SAFE_INTEGER","mathfloor","LOG_BASE","push","format","rm","id","c0","ne","toString","coeffToString","TO_EXP_NEG","TO_EXP_POS","toExponential","toFixedPoint","maxOrMin","method","m","normalise","j","pop","sd","d","ni","rd","xc","pows10","POWS_TEN","out","mathceil","BASE","valueOf","div","P","ONE","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","set","obj","p","bignumberError","hasOwnProperty","MAX","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","maximum","max","lt","minimum","min","gt","random","random53bitInt","dp","a","rand","Uint32Array","copy","splice","sum","plus","toBaseOut","baseIn","baseOut","arrL","arr","reverse","sign","callerIsToString","y","multiply","base","temp","xlo","xhi","carry","klo","SQRT_BASE","khi","compare","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","yc","NaN","bitFloor","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","isNaN","p1","p2","absoluteValue","abs","comparedTo","decimalPlaces","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","isOdd","mod","integerValue","isEqualTo","eq","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","t","xLTy","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFormat","split","g1","g2","intPart","fractionPart","isNeg","intDigits","substr","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON","hasSymbol","Symbol","toStringTag","for","z","l","name","zs","iterator","ceil","floor","undefined","define"],"mappings":"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","file":"route-home.chunk.39af4.js","sourcesContent":["webpackJsonp([0],{\n\n/***/ \"ZAL5\":\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\nmodule.exports = {\"home\":\"home__2Q5nZ\"};\n\n/***/ }),\n\n/***/ \"iOg+\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_preact__ = __webpack_require__(\"KM04\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_preact___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_preact__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__style__ = __webpack_require__(\"ZAL5\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__style___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__style__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_bigbinom__ = __webpack_require__(\"ukom\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_bigbinom___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_bigbinom__);\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\n\n\nvar sumStrings = function sumStrings(str1, str2) {\n  return Number.parseFloat(str1) + Number.parseFloat(str2);\n};\n\nvar getExpected = function getExpected(str1, str2, str3) {\n  var expected = Number.parseFloat(str1) * Number.parseFloat(str2) / Number.parseFloat(str3);\n\n  return expected.toFixed(2);\n};\n\nvar getRelative = function getRelative(str1, str2) {\n  var relative = Number.parseFloat(str1) / Number.parseFloat(str2) * 100;\n\n  return relative.toFixed(2);\n};\n\nvar getResidual = function getResidual(str1, str2) {\n  var residual = Math.pow(Number.parseFloat(str1) - Number.parseFloat(str2), 2) / Number.parseFloat(str2);\n  return residual.toFixed(3);\n};\n\nvar getChisquare = function getChisquare(str1, str2, str3, str4) {\n  var chisquare = Number.parseFloat(str1) + Number.parseFloat(str2) + Number.parseFloat(str3) + Number.parseFloat(str4);\n  return chisquare.toFixed(3);\n};\n\nvar getPhisquare = function getPhisquare(str1, str2) {\n  var phisquare = Number.parseFloat(str1) / Number.parseFloat(str2);\n  return phisquare.toFixed(3);\n};\n\nfunction rFact(num) {\n  var rval = 1;\n  for (var i = 2; i <= num; i++) {\n    rval = rval * i;\n  }return rval;\n}\n\nvar isSignificant = function isSignificant(chisquare) {\n  if (chisquare < 3.841) {\n    return 'result is not significant';\n  } else {\n    return 'result is significant';\n  }\n};\n\nvar getFisher = function getFisher(str1, str2, str3, str4, str5) {\n  str1 = Number.parseFloat(str1);\n  str2 = Number.parseFloat(str2);\n  str3 = Number.parseFloat(str3);\n  str4 = Number.parseFloat(str4);\n\n  var bn1 = new __WEBPACK_IMPORTED_MODULE_2_bigbinom___default.a(str1 + str2, str1),\n      bn2 = new __WEBPACK_IMPORTED_MODULE_2_bigbinom___default.a(str3 + str4, str3),\n      bn3 = new __WEBPACK_IMPORTED_MODULE_2_bigbinom___default.a(str1 + str2 + str3 + str4, str1 + str3);\n\n  return bn1.times(bn2).dividedBy(bn3).toFixed(4);\n\n  // const sum1 =\n  //   rFact(Number.parseFloat(str1) + Number.parseFloat(str2)) *\n  //   rFact(Number.parseFloat(str3) + Number.parseFloat(str4)) *\n  //   rFact(Number.parseFloat(str1) + Number.parseFloat(str3)) *\n  //   rFact(Number.parseFloat(str2) + Number.parseFloat(str4));\n  // console.log(sum1);\n\n  // const sum2 =\n  //   rFact(Number.parseFloat(str2)) *\n  //   rFact(Number.parseFloat(str3)) *\n  //   rFact(Number.parseFloat(str4)) *\n  //   rFact(Number.parseFloat(str5));\n\n  // console.log(sum2);\n\n  // const fisher = sum1.toFixed(1) / sum2.toFixed(1);\n  // console.log(fisher);\n\n  // return fisher.toFixed(3);\n};\n\nvar _ref = Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"br\", null);\n\nvar _ref2 = Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"br\", null);\n\nvar _ref3 = Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"br\", null);\n\nvar _ref4 = Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"br\", null);\n\nvar _ref5 = Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"br\", null);\n\nvar _ref6 = Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"br\", null);\n\nvar Home = function (_Component) {\n  _inherits(Home, _Component);\n\n  function Home() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Home);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.state = {\n      observed: {\n        row1: [\"Observed\", \"\", \"\", \"Totals\"],\n        row2: [\"\", null, null, null],\n        row3: [\"\", null, null, null],\n        row4: [\"Totals\", null, null, null]\n      },\n      expected: {\n        row1: [\"Expected\", \"\", \"\", \"Totals\"],\n        row2: [\"\", null, null, null],\n        row3: [\"\", null, null, null],\n        row4: [\"Totals\", null, null, null]\n      },\n\n      relative: {\n        row1: [\"Relative (%)\", \"\", \"\"],\n        row2: [\"\", null, null],\n        row3: [\"\", null, null],\n        row4: [\"Totals\", null, null]\n      },\n\n      residual: {\n        row1: [\"Residual\", \"\", \"\"],\n        row2: [\"\", null, null],\n        row3: [\"\", null, null]\n      },\n\n      chisquare: {\n        row1: [\"Chi-square\", null, null]\n      },\n\n      phisquare: {\n        row1: [\"Phi-square\", null]\n      },\n\n      fisher: {\n        row1: [\"Fisher Exact Test(one-tailed)\", null]\n      },\n\n      step: 0\n    }, _this.setValues = function (e, columnIndex, index) {\n      var observed = _this.state.observed;\n\n      var newRow = observed[\"row\" + columnIndex];\n      newRow[index] = e.target.value;\n\n      observed[\"row\" + columnIndex] = [].concat(newRow);\n\n      _this.setState({\n        observed: observed\n      });\n    }, _this.onSumExpected = function () {\n      var _this$state = _this.state,\n          o = _this$state.observed,\n          e = _this$state.expected,\n          rel = _this$state.relative,\n          r = _this$state.residual,\n          chi = _this$state.chisquare,\n          phi = _this$state.phisquare,\n          fish = _this$state.fisher;\n\n      // totals\n\n      o.row2[3] = sumStrings(o.row2[1], o.row2[2]);\n      o.row3[3] = sumStrings(o.row3[1], o.row3[2]);\n      o.row4[3] = sumStrings(o.row4[1], o.row4[2]);\n\n      o.row4[1] = sumStrings(o.row2[1], o.row3[1]);\n      o.row4[2] = sumStrings(o.row2[2], o.row3[2]);\n      o.row4[3] = sumStrings(o.row4[1], o.row4[2]);\n\n      // expected\n      e.row2[1] = getExpected(o.row4[1], o.row2[3], o.row4[3]);\n      e.row2[2] = getExpected(o.row4[2], o.row2[3], o.row4[3]);\n\n      e.row3[1] = getExpected(o.row4[1], o.row3[3], o.row4[3]);\n      e.row3[2] = getExpected(o.row4[2], o.row3[3], o.row4[3]);\n\n      // relative\n      rel.row2[1] = getRelative(o.row2[1], o.row4[3]);\n      rel.row2[2] = getRelative(o.row2[2], o.row4[3]);\n\n      rel.row3[1] = getRelative(o.row3[1], o.row4[3]);\n      rel.row3[2] = getRelative(o.row3[2], o.row4[3]);\n\n      //relativesums\n      rel.row2[3] = getRelative(rel.row2[1], rel.row2[2]);\n      rel.row3[3] = getRelative(rel.row3[1], rel.row3[2]);\n\n      rel.row4[1] = getRelative(rel.row2[1], rel.row2[2]);\n      rel.row4[2] = getRelative(rel.row3[1], rel.row3[2]);\n\n      rel.row4[3] = getRelative(rel.row4[1], rel.row4[2]);\n\n      // residual\n      r.row2[1] = getResidual(o.row2[1], e.row2[1], e.row2[1]);\n      r.row2[2] = getResidual(o.row2[2], e.row2[2], e.row2[2]);\n\n      r.row3[1] = getResidual(o.row3[1], e.row3[1], e.row3[1]);\n      r.row3[2] = getResidual(o.row3[2], e.row3[2], e.row3[2]);\n\n      // chisquare\n      chi.row1[1] = getChisquare(r.row2[1], r.row2[2], r.row3[1], r.row3[2]);\n      chi.row1[2] = isSignificant(chi.row1[1]);\n\n      // phisquare\n      phi.row1[1] = getPhisquare(chi.row1[1], o.row4[3]);\n\n      // fisher\n      fish.row1[1] = getFisher(o.row2[1], o.row2[2], o.row3[1], o.row3[2], e.row4[3]);\n      console.log(fish.row1[1]);\n\n      _this.setState({\n        observed: o,\n        expected: e,\n        relative: rel,\n        residual: r,\n        chisquare: chi,\n        phisquare: phi,\n        fisher: fish,\n        step: 1\n      });\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  Home.prototype.render = function render() {\n    var _this2 = this;\n\n    console.log(this.state);\n    var _state = this.state,\n        o = _state.observed,\n        e = _state.expected,\n        rel = _state.relative,\n        r = _state.residual,\n        chi = _state.chisquare,\n        phi = _state.phisquare,\n        fish = _state.fisher,\n        step = _state.step;\n\n\n    return Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n      \"div\",\n      { \"class\": __WEBPACK_IMPORTED_MODULE_1__style___default.a.home },\n      Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n        \"table\",\n        null,\n        Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n          \"tbody\",\n          null,\n          Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n            \"tr\",\n            null,\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", { disabled: true, value: o.row1[0] })\n            ),\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", {\n                type: \"text\",\n                value: o.row1[1],\n                onChange: function onChange(e) {\n                  return _this2.setValues(e, 1, 1);\n                }\n              })\n            ),\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", {\n                type: \"text\",\n                value: o.row1[2],\n                onChange: function onChange(e) {\n                  return _this2.setValues(e, 1, 2);\n                }\n              })\n            ),\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", { type: \"text\", disabled: true, value: o.row1[3] })\n            )\n          ),\n          Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n            \"tr\",\n            null,\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", {\n                type: \"text\",\n                value: o.row2[0],\n                onChange: function onChange(e) {\n                  return _this2.setValues(e, 2, 0);\n                }\n              })\n            ),\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", {\n                type: \"number\",\n                value: o.row2[1],\n                onChange: function onChange(e) {\n                  return _this2.setValues(e, 2, 1);\n                }\n              })\n            ),\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", {\n                type: \"number\",\n                value: o.row2[2],\n                onChange: function onChange(e) {\n                  return _this2.setValues(e, 2, 2);\n                }\n              })\n            ),\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", { type: \"number\", disabled: true, value: o.row2[3] })\n            )\n          ),\n          Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n            \"tr\",\n            null,\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", {\n                type: \"text\",\n                value: o.row3[0],\n                onChange: function onChange(e) {\n                  return _this2.setValues(e, 3, 0);\n                }\n              })\n            ),\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", {\n                type: \"number\",\n                value: o.row3[1],\n                onChange: function onChange(e) {\n                  return _this2.setValues(e, 3, 1);\n                }\n              })\n            ),\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", {\n                type: \"number\",\n                value: o.row3[2],\n                onChange: function onChange(e) {\n                  return _this2.setValues(e, 3, 2);\n                }\n              })\n            ),\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", { type: \"text\", disabled: true, value: o.row3[3] })\n            )\n          ),\n          Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n            \"tr\",\n            null,\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", { type: \"text\", disabled: true, value: o.row4[0] })\n            ),\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", { type: \"number\", disabled: true, value: o.row4[1] })\n            ),\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", { type: \"number\", disabled: true, value: o.row4[2] })\n            ),\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", { type: \"number\", disabled: true, value: o.row4[3] })\n            )\n          )\n        )\n      ),\n      _ref,\n      Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n        \"button\",\n        { onClick: this.onSumExpected },\n        \"Calculate Chi-Square Value\"\n      ),\n      _ref2,\n      _ref3,\n      step == 1 && Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n        \"table\",\n        null,\n        Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n          \"tbody\",\n          null,\n          Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n            \"tr\",\n            null,\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", { disabled: true, value: e.row1[0] })\n            ),\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", {\n                type: \"text\",\n                disabled: true,\n                value: o.row1[1],\n                onChange: function onChange(e) {\n                  return _this2.setValues(e, 1, 1);\n                }\n              })\n            ),\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", {\n                type: \"text\",\n                disabled: true,\n                value: o.row1[2],\n                onChange: function onChange(e) {\n                  return _this2.setValues(e, 1, 2);\n                }\n              })\n            ),\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", { type: \"text\", disabled: true, value: o.row1[3] })\n            )\n          ),\n          Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n            \"tr\",\n            null,\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", {\n                type: \"text\",\n                disabled: true,\n                value: o.row2[0],\n                onChange: function onChange(e) {\n                  return _this2.setValues(e, 2, 0);\n                }\n              })\n            ),\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", { type: \"number\", disabled: true, value: e.row2[1] })\n            ),\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", {\n                type: \"number\",\n                disabled: true,\n                value: e.row2[2],\n                onChange: function onChange(e) {\n                  return _this2.setValues(e, 2, 2);\n                }\n              })\n            ),\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", { type: \"number\", disabled: true, value: o.row2[3] })\n            )\n          ),\n          Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n            \"tr\",\n            null,\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", {\n                type: \"text\",\n                disabled: true,\n                value: o.row3[0],\n                onChange: function onChange(e) {\n                  return _this2.setValues(e, 3, 0);\n                }\n              })\n            ),\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", { type: \"number\", disabled: true, value: e.row3[1] })\n            ),\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", { type: \"number\", disabled: true, value: e.row3[2] })\n            ),\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", { type: \"text\", disabled: true, value: o.row3[3] })\n            )\n          ),\n          Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n            \"tr\",\n            null,\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", { type: \"text\", disabled: true, value: o.row4[0] })\n            ),\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", { type: \"number\", disabled: true, value: o.row4[1] })\n            ),\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", { type: \"number\", disabled: true, value: o.row4[2] })\n            ),\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", { type: \"number\", disabled: true, value: o.row4[3] })\n            )\n          )\n        )\n      ),\n      _ref4,\n      step == 1 && Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n        \"table\",\n        null,\n        Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n          \"tbody\",\n          null,\n          Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n            \"tr\",\n            null,\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", { disabled: true, value: rel.row1[0] })\n            ),\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", {\n                type: \"text\",\n                disabled: true,\n                value: o.row1[1],\n                onChange: function onChange(rel) {\n                  return _this2.setValues(rel, 1, 1);\n                }\n              })\n            ),\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", {\n                type: \"text\",\n                disabled: true,\n                value: o.row1[2],\n                onChange: function onChange(e) {\n                  return _this2.setValues(e, 1, 2);\n                }\n              })\n            )\n          ),\n          Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n            \"tr\",\n            null,\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", {\n                type: \"text\",\n                disabled: true,\n                value: o.row2[0],\n                onChange: function onChange(e) {\n                  return _this2.setValues(e, 2, 0);\n                }\n              })\n            ),\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", { type: \"number\", disabled: true, value: rel.row2[1] })\n            ),\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", {\n                type: \"number\",\n                disabled: true,\n                value: rel.row2[2],\n                onChange: function onChange(rel) {\n                  return _this2.setValues(rel, 2, 2);\n                }\n              })\n            )\n          ),\n          Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n            \"tr\",\n            null,\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", {\n                type: \"text\",\n                disabled: true,\n                value: o.row3[0],\n                onChange: function onChange(e) {\n                  return _this2.setValues(e, 3, 0);\n                }\n              })\n            ),\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", { type: \"number\", disabled: true, value: rel.row3[1] })\n            ),\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", { type: \"number\", disabled: true, value: rel.row3[2] })\n            )\n          )\n        )\n      ),\n      _ref5,\n      step == 1 && Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n        \"table\",\n        null,\n        Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n          \"tbody\",\n          null,\n          Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n            \"tr\",\n            null,\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", { disabled: true, value: r.row1[0] })\n            ),\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", {\n                type: \"text\",\n                disabled: true,\n                value: o.row1[1],\n                onChange: function onChange(e) {\n                  return _this2.setValues(e, 1, 1);\n                }\n              })\n            ),\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", {\n                type: \"text\",\n                disabled: true,\n                value: o.row1[2],\n                onChange: function onChange(e) {\n                  return _this2.setValues(e, 1, 2);\n                }\n              })\n            )\n          ),\n          Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n            \"tr\",\n            null,\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", {\n                type: \"text\",\n                disabled: true,\n                value: o.row2[0],\n                onChange: function onChange(e) {\n                  return _this2.setValues(e, 2, 0);\n                }\n              })\n            ),\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", { type: \"number\", disabled: true, value: r.row2[1] })\n            ),\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", {\n                type: \"number\",\n                disabled: true,\n                value: r.row2[2],\n                onChange: function onChange(r) {\n                  return _this2.setValues(r, 2, 2);\n                }\n              })\n            )\n          ),\n          Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n            \"tr\",\n            null,\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", {\n                type: \"text\",\n                disabled: true,\n                value: o.row3[0],\n                onChange: function onChange(e) {\n                  return _this2.setValues(e, 3, 0);\n                }\n              })\n            ),\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", { type: \"number\", disabled: true, value: r.row3[1] })\n            ),\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", { type: \"number\", disabled: true, value: r.row3[2] })\n            )\n          )\n        )\n      ),\n      _ref6,\n      step == 1 && Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n        \"table\",\n        null,\n        Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n          \"tbody\",\n          null,\n          Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n            \"tr\",\n            null,\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", { disabled: true, value: chi.row1[0] })\n            ),\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", {\n                type: \"text\", disabled: true, value: chi.row1[1]\n              })\n            ),\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", {\n                type: \"text\", disabled: true, value: chi.row1[2]\n              })\n            )\n          )\n        )\n      ),\n      step == 1 && Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n        \"table\",\n        null,\n        Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n          \"tbody\",\n          null,\n          Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n            \"tr\",\n            null,\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", { disabled: true, value: phi.row1[0] })\n            ),\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", {\n                type: \"text\",\n                disabled: true,\n                value: phi.row1[1],\n                onChange: function onChange(phi) {\n                  return _this2.setValues(phi, 1, 1);\n                }\n              })\n            )\n          )\n        )\n      ),\n      step == 1 && Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n        \"table\",\n        null,\n        Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n          \"tbody\",\n          null,\n          Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n            \"tr\",\n            null,\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", { disabled: true, value: fish.row1[0] })\n            ),\n            Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\n              \"td\",\n              null,\n              Object(__WEBPACK_IMPORTED_MODULE_0_preact__[\"h\"])(\"input\", { type: \"text\", disabled: true, value: fish.row1[1] })\n            )\n          )\n        )\n      )\n    );\n  };\n\n  return Home;\n}(__WEBPACK_IMPORTED_MODULE_0_preact__[\"Component\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Home);\n\n/***/ }),\n\n/***/ \"ukom\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/*\n * bigbinom\n * https://github.com/sackio/bigbinom\n *\n * Copyright (c) 2014 Ben Sack\n * Licensed under the MIT license.\n */\n\n\n\nvar BigNumber = __webpack_require__(\"vrSf\");\n\nmodule.exports = function (n, k) {\n  if (k > n) return new BigNumber(0);\n  if (n === k) return new BigNumber(1);\n  if (k > n - k) k = n - k;\n\n  var cf = new BigNumber(1);\n  for (var i = 1; i <= k; i++) {\n    cf = cf.times(n--);\n    cf = cf.dividedBy(i);\n  }\n\n  return cf;\n};\n\n/***/ }),\n\n/***/ \"vrSf\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_RESULT__;;(function (globalObject) {\n  'use strict';\n\n  /*\r\n   *      bignumber.js v8.1.1\r\n   *      A JavaScript library for arbitrary-precision arithmetic.\r\n   *      https://github.com/MikeMcl/bignumber.js\r\n   *      Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>\r\n   *      MIT Licensed.\r\n   *\r\n   *      BigNumber.prototype methods     |  BigNumber methods\r\n   *                                      |\r\n   *      absoluteValue            abs    |  clone\r\n   *      comparedTo                      |  config               set\r\n   *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n   *      dividedBy                div    |      ROUNDING_MODE\r\n   *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n   *      exponentiatedBy          pow    |      RANGE\r\n   *      integerValue                    |      CRYPTO\r\n   *      isEqualTo                eq     |      MODULO_MODE\r\n   *      isFinite                        |      POW_PRECISION\r\n   *      isGreaterThan            gt     |      FORMAT\r\n   *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n   *      isInteger                       |  isBigNumber\r\n   *      isLessThan               lt     |  maximum              max\r\n   *      isLessThanOrEqualTo      lte    |  minimum              min\r\n   *      isNaN                           |  random\r\n   *      isNegative                      |  sum\r\n   *      isPositive                      |\r\n   *      isZero                          |\r\n   *      minus                           |\r\n   *      modulo                   mod    |\r\n   *      multipliedBy             times  |\r\n   *      negated                         |\r\n   *      plus                            |\r\n   *      precision                sd     |\r\n   *      shiftedBy                       |\r\n   *      squareRoot               sqrt   |\r\n   *      toExponential                   |\r\n   *      toFixed                         |\r\n   *      toFormat                        |\r\n   *      toFraction                      |\r\n   *      toJSON                          |\r\n   *      toNumber                        |\r\n   *      toPrecision                     |\r\n   *      toString                        |\r\n   *      valueOf                         |\r\n   *\r\n   */\n\n  var BigNumber,\n      isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\n      hasSymbol = typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol',\n      mathceil = Math.ceil,\n      mathfloor = Math.floor,\n      bignumberError = '[BigNumber Error] ',\n      tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\n      BASE = 1e14,\n      LOG_BASE = 14,\n      MAX_SAFE_INTEGER = 0x1fffffffffffff,\n      // 2^53 - 1\n  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\n  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\n      SQRT_BASE = 1e7,\n\n\n  // EDITABLE\n  // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\n  // the arguments to toExponential, toFixed, toFormat, and toPrecision.\n  MAX = 1E9; // 0 to MAX_INT32\n\n\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\n  function clone(configObject) {\n    var div,\n        convertBase,\n        parseNumeric,\n        P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\n        ONE = new BigNumber(1),\n\n\n    //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\n\n\n    // The default values below must be integers within the inclusive ranges stated.\n    // The values can also be changed at run-time using BigNumber.set.\n\n    // The maximum number of decimal places for operations involving division.\n    DECIMAL_PLACES = 20,\n        // 0 to MAX\n\n    // The rounding mode used when rounding to the above decimal places, and when using\n    // toExponential, toFixed, toFormat and toPrecision, and round (default value).\n    // UP         0 Away from zero.\n    // DOWN       1 Towards zero.\n    // CEIL       2 Towards +Infinity.\n    // FLOOR      3 Towards -Infinity.\n    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n    ROUNDING_MODE = 4,\n        // 0 to 8\n\n    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\n\n    // The exponent value at and beneath which toString returns exponential notation.\n    // Number type: -7\n    TO_EXP_NEG = -7,\n        // 0 to -MAX\n\n    // The exponent value at and above which toString returns exponential notation.\n    // Number type: 21\n    TO_EXP_POS = 21,\n        // 0 to MAX\n\n    // RANGE : [MIN_EXP, MAX_EXP]\n\n    // The minimum exponent value, beneath which underflow to zero occurs.\n    // Number type: -324  (5e-324)\n    MIN_EXP = -1e7,\n        // -1 to -MAX\n\n    // The maximum exponent value, above which overflow to Infinity occurs.\n    // Number type:  308  (1.7976931348623157e+308)\n    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\n    MAX_EXP = 1e7,\n        // 1 to MAX\n\n    // Whether to use cryptographically-secure random number generation, if available.\n    CRYPTO = false,\n        // true or false\n\n    // The modulo mode used when calculating the modulus: a mod n.\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\n    // The remainder (r) is calculated as: r = a - n * q.\n    //\n    // UP        0 The remainder is positive if the dividend is negative, else is negative.\n    // DOWN      1 The remainder has the same sign as the dividend.\n    //             This modulo mode is commonly known as 'truncated division' and is\n    //             equivalent to (a % n) in JavaScript.\n    // FLOOR     3 The remainder has the same sign as the divisor (Python %).\n    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\n    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\n    //             The remainder is always positive.\n    //\n    // The truncated division, floored division, Euclidian division and IEEE 754 remainder\n    // modes are commonly used for the modulus operation.\n    // Although the other rounding modes can also be used, they may not give useful results.\n    MODULO_MODE = 1,\n        // 0 to 9\n\n    // The maximum number of significant digits of the result of the exponentiatedBy operation.\n    // If POW_PRECISION is 0, there will be unlimited significant digits.\n    POW_PRECISION = 0,\n        // 0 to MAX\n\n    // The format specification used by the BigNumber.prototype.toFormat method.\n    FORMAT = {\n      prefix: '',\n      groupSize: 3,\n      secondaryGroupSize: 0,\n      groupSeparator: ',',\n      decimalSeparator: '.',\n      fractionGroupSize: 0,\n      fractionGroupSeparator: '\\xA0', // non-breaking space\n      suffix: ''\n    },\n\n\n    // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\n    // '-', '.', whitespace, or repeated character.\n    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\n    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\n\n    //------------------------------------------------------------------------------------------\n\n\n    // CONSTRUCTOR\n\n\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\n    function BigNumber(v, b) {\n      var alphabet,\n          c,\n          caseChanged,\n          e,\n          i,\n          isNum,\n          len,\n          str,\n          x = this;\n\n      // Enable constructor call without `new`.\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\n\n      if (b == null) {\n\n        if (v && v._isBigNumber === true) {\n          x.s = v.s;\n\n          if (!v.c || v.e > MAX_EXP) {\n            x.c = x.e = null;\n          } else if (v.e < MIN_EXP) {\n            x.c = [x.e = 0];\n          } else {\n            x.e = v.e;\n            x.c = v.c.slice();\n          }\n\n          return;\n        }\n\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\n\n          // Use `1 / n` to handle minus zero also.\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\n\n          // Fast path for integers, where n < 2147483648 (2**31).\n          if (v === ~~v) {\n            for (e = 0, i = v; i >= 10; i /= 10, e++) {}\n\n            if (e > MAX_EXP) {\n              x.c = x.e = null;\n            } else {\n              x.e = e;\n              x.c = [v];\n            }\n\n            return;\n          }\n\n          str = String(v);\n        } else {\n\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\n\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\n        }\n\n        // Decimal point?\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\n\n        // Exponential form?\n        if ((i = str.search(/e/i)) > 0) {\n\n          // Determine exponent.\n          if (e < 0) e = i;\n          e += +str.slice(i + 1);\n          str = str.substring(0, i);\n        } else if (e < 0) {\n\n          // Integer.\n          e = str.length;\n        }\n      } else {\n\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\n        intCheck(b, 2, ALPHABET.length, 'Base');\n\n        // Allow exponential notation to be used with base 10 argument, while\n        // also rounding to DECIMAL_PLACES as with other bases.\n        if (b == 10) {\n          x = new BigNumber(v);\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\n        }\n\n        str = String(v);\n\n        if (isNum = typeof v == 'number') {\n\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\n\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\n\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\n            throw Error(tooManyDigits + v);\n          }\n        } else {\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\n        }\n\n        alphabet = ALPHABET.slice(0, b);\n        e = i = 0;\n\n        // Check that str is a valid base b number.\n        // Don't use RegExp, so alphabet can contain special characters.\n        for (len = str.length; i < len; i++) {\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\n            if (c == '.') {\n\n              // If '.' is not the first character and it has not be found before.\n              if (i > e) {\n                e = len;\n                continue;\n              }\n            } else if (!caseChanged) {\n\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {\n                caseChanged = true;\n                i = -1;\n                e = 0;\n                continue;\n              }\n            }\n\n            return parseNumeric(x, String(v), isNum, b);\n          }\n        }\n\n        // Prevent later check for length on converted number.\n        isNum = false;\n        str = convertBase(str, b, 10, x.s);\n\n        // Decimal point?\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');else e = str.length;\n      }\n\n      // Determine leading zeros.\n      for (i = 0; str.charCodeAt(i) === 48; i++) {}\n\n      // Determine trailing zeros.\n      for (len = str.length; str.charCodeAt(--len) === 48;) {}\n\n      if (str = str.slice(i, ++len)) {\n        len -= i;\n\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n        if (isNum && BigNumber.DEBUG && len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\n          throw Error(tooManyDigits + x.s * v);\n        }\n\n        // Overflow?\n        if ((e = e - i - 1) > MAX_EXP) {\n\n          // Infinity.\n          x.c = x.e = null;\n\n          // Underflow?\n        } else if (e < MIN_EXP) {\n\n          // Zero.\n          x.c = [x.e = 0];\n        } else {\n          x.e = e;\n          x.c = [];\n\n          // Transform base\n\n          // e is the base 10 exponent.\n          // i is where to slice str to get the first element of the coefficient array.\n          i = (e + 1) % LOG_BASE;\n          if (e < 0) i += LOG_BASE; // i < 1\n\n          if (i < len) {\n            if (i) x.c.push(+str.slice(0, i));\n\n            for (len -= LOG_BASE; i < len;) {\n              x.c.push(+str.slice(i, i += LOG_BASE));\n            }\n\n            i = LOG_BASE - (str = str.slice(i)).length;\n          } else {\n            i -= len;\n          }\n\n          for (; i--; str += '0') {}\n          x.c.push(+str);\n        }\n      } else {\n\n        // Zero.\n        x.c = [x.e = 0];\n      }\n    }\n\n    // CONSTRUCTOR PROPERTIES\n\n\n    BigNumber.clone = clone;\n\n    BigNumber.ROUND_UP = 0;\n    BigNumber.ROUND_DOWN = 1;\n    BigNumber.ROUND_CEIL = 2;\n    BigNumber.ROUND_FLOOR = 3;\n    BigNumber.ROUND_HALF_UP = 4;\n    BigNumber.ROUND_HALF_DOWN = 5;\n    BigNumber.ROUND_HALF_EVEN = 6;\n    BigNumber.ROUND_HALF_CEIL = 7;\n    BigNumber.ROUND_HALF_FLOOR = 8;\n    BigNumber.EUCLID = 9;\n\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\n    BigNumber.config = BigNumber.set = function (obj) {\n      var p, v;\n\n      if (obj != null) {\n\n        if (typeof obj == 'object') {\n\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\n            v = obj[p];\n            intCheck(v, 0, MAX, p);\n            DECIMAL_PLACES = v;\n          }\n\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\n            v = obj[p];\n            intCheck(v, 0, 8, p);\n            ROUNDING_MODE = v;\n          }\n\n          // EXPONENTIAL_AT {number|number[]}\n          // Integer, -MAX to MAX inclusive or\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\n            v = obj[p];\n            if (v && v.pop) {\n              intCheck(v[0], -MAX, 0, p);\n              intCheck(v[1], 0, MAX, p);\n              TO_EXP_NEG = v[0];\n              TO_EXP_POS = v[1];\n            } else {\n              intCheck(v, -MAX, MAX, p);\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\n            }\n          }\n\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\n          if (obj.hasOwnProperty(p = 'RANGE')) {\n            v = obj[p];\n            if (v && v.pop) {\n              intCheck(v[0], -MAX, -1, p);\n              intCheck(v[1], 1, MAX, p);\n              MIN_EXP = v[0];\n              MAX_EXP = v[1];\n            } else {\n              intCheck(v, -MAX, MAX, p);\n              if (v) {\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\n              } else {\n                throw Error(bignumberError + p + ' cannot be zero: ' + v);\n              }\n            }\n          }\n\n          // CRYPTO {boolean} true or false.\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\n          // '[BigNumber Error] crypto unavailable'\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\n            v = obj[p];\n            if (v === !!v) {\n              if (v) {\n                if (typeof crypto != 'undefined' && crypto && (crypto.getRandomValues || crypto.randomBytes)) {\n                  CRYPTO = v;\n                } else {\n                  CRYPTO = !v;\n                  throw Error(bignumberError + 'crypto unavailable');\n                }\n              } else {\n                CRYPTO = v;\n              }\n            } else {\n              throw Error(bignumberError + p + ' not true or false: ' + v);\n            }\n          }\n\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\n            v = obj[p];\n            intCheck(v, 0, 9, p);\n            MODULO_MODE = v;\n          }\n\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\n            v = obj[p];\n            intCheck(v, 0, MAX, p);\n            POW_PRECISION = v;\n          }\n\n          // FORMAT {object}\n          // '[BigNumber Error] FORMAT not an object: {v}'\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\n            v = obj[p];\n            if (typeof v == 'object') FORMAT = v;else throw Error(bignumberError + p + ' not an object: ' + v);\n          }\n\n          // ALPHABET {string}\n          // '[BigNumber Error] ALPHABET invalid: {v}'\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\n            v = obj[p];\n\n            // Disallow if only one character,\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\n            if (typeof v == 'string' && !/^.$|[+-.\\s]|(.).*\\1/.test(v)) {\n              ALPHABET = v;\n            } else {\n              throw Error(bignumberError + p + ' invalid: ' + v);\n            }\n          }\n        } else {\n\n          // '[BigNumber Error] Object expected: {v}'\n          throw Error(bignumberError + 'Object expected: ' + obj);\n        }\n      }\n\n      return {\n        DECIMAL_PLACES: DECIMAL_PLACES,\n        ROUNDING_MODE: ROUNDING_MODE,\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\n        RANGE: [MIN_EXP, MAX_EXP],\n        CRYPTO: CRYPTO,\n        MODULO_MODE: MODULO_MODE,\n        POW_PRECISION: POW_PRECISION,\n        FORMAT: FORMAT,\n        ALPHABET: ALPHABET\n      };\n    };\n\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\n    BigNumber.isBigNumber = function (v) {\n      if (!v || v._isBigNumber !== true) return false;\n      if (!BigNumber.DEBUG) return true;\n\n      var i,\n          n,\n          c = v.c,\n          e = v.e,\n          s = v.s;\n\n      out: if ({}.toString.call(c) == '[object Array]') {\n\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\n\n          // If the first element is zero, the BigNumber value must be zero.\n          if (c[0] === 0) {\n            if (e === 0 && c.length === 1) return true;\n            break out;\n          }\n\n          // Calculate number of digits that c[0] should have, based on the exponent.\n          i = (e + 1) % LOG_BASE;\n          if (i < 1) i += LOG_BASE;\n\n          // Calculate number of digits of c[0].\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\n          if (String(c[0]).length == i) {\n\n            for (i = 0; i < c.length; i++) {\n              n = c[i];\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\n            }\n\n            // Last element cannot be zero, unless it is the only element.\n            if (n !== 0) return true;\n          }\n        }\n\n        // Infinity/NaN\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\n        return true;\n      }\n\n      throw Error(bignumberError + 'Invalid BigNumber: ' + v);\n    };\n\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\n    BigNumber.maximum = BigNumber.max = function () {\n      return maxOrMin(arguments, P.lt);\n    };\n\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\n    BigNumber.minimum = BigNumber.min = function () {\n      return maxOrMin(arguments, P.gt);\n    };\n\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\n    BigNumber.random = function () {\n      var pow2_53 = 0x20000000000000;\n\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\n      // Check if Math.random() produces more than 32 bits of randomness.\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\n      var random53bitInt = Math.random() * pow2_53 & 0x1fffff ? function () {\n        return mathfloor(Math.random() * pow2_53);\n      } : function () {\n        return (Math.random() * 0x40000000 | 0) * 0x800000 + (Math.random() * 0x800000 | 0);\n      };\n\n      return function (dp) {\n        var a,\n            b,\n            e,\n            k,\n            v,\n            i = 0,\n            c = [],\n            rand = new BigNumber(ONE);\n\n        if (dp == null) dp = DECIMAL_PLACES;else intCheck(dp, 0, MAX);\n\n        k = mathceil(dp / LOG_BASE);\n\n        if (CRYPTO) {\n\n          // Browsers supporting crypto.getRandomValues.\n          if (crypto.getRandomValues) {\n\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\n\n            for (; i < k;) {\n\n              // 53 bits:\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\n              //                                     11111 11111111 11111111\n              // 0x20000 is 2^21.\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\n\n              // Rejection sampling:\n              // 0 <= v < 9007199254740992\n              // Probability that v >= 9e15, is\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\n              if (v >= 9e15) {\n                b = crypto.getRandomValues(new Uint32Array(2));\n                a[i] = b[0];\n                a[i + 1] = b[1];\n              } else {\n\n                // 0 <= v <= 8999999999999999\n                // 0 <= (v % 1e14) <= 99999999999999\n                c.push(v % 1e14);\n                i += 2;\n              }\n            }\n            i = k / 2;\n\n            // Node.js supporting crypto.randomBytes.\n          } else if (crypto.randomBytes) {\n\n            // buffer\n            a = crypto.randomBytes(k *= 7);\n\n            for (; i < k;) {\n\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\n              // 0 <= v < 9007199254740992\n              v = (a[i] & 31) * 0x1000000000000 + a[i + 1] * 0x10000000000 + a[i + 2] * 0x100000000 + a[i + 3] * 0x1000000 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\n\n              if (v >= 9e15) {\n                crypto.randomBytes(7).copy(a, i);\n              } else {\n\n                // 0 <= (v % 1e14) <= 99999999999999\n                c.push(v % 1e14);\n                i += 7;\n              }\n            }\n            i = k / 7;\n          } else {\n            CRYPTO = false;\n            throw Error(bignumberError + 'crypto unavailable');\n          }\n        }\n\n        // Use Math.random.\n        if (!CRYPTO) {\n\n          for (; i < k;) {\n            v = random53bitInt();\n            if (v < 9e15) c[i++] = v % 1e14;\n          }\n        }\n\n        k = c[--i];\n        dp %= LOG_BASE;\n\n        // Convert trailing digits to zeros according to dp.\n        if (k && dp) {\n          v = POWS_TEN[LOG_BASE - dp];\n          c[i] = mathfloor(k / v) * v;\n        }\n\n        // Remove trailing elements which are zero.\n        for (; c[i] === 0; c.pop(), i--) {}\n\n        // Zero?\n        if (i < 0) {\n          c = [e = 0];\n        } else {\n\n          // Remove leading elements which are zero and adjust exponent accordingly.\n          for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE) {}\n\n          // Count the digits of the first element of c to determine leading zeros, and...\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++) {}\n\n          // adjust the exponent accordingly.\n          if (i < LOG_BASE) e -= LOG_BASE - i;\n        }\n\n        rand.e = e;\n        rand.c = c;\n        return rand;\n      };\n    }();\n\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\n    BigNumber.sum = function () {\n      var i = 1,\n          args = arguments,\n          sum = new BigNumber(args[0]);\n      for (; i < args.length;) {\n        sum = sum.plus(args[i++]);\n      }return sum;\n    };\n\n    // PRIVATE FUNCTIONS\n\n\n    // Called by BigNumber and BigNumber.prototype.toString.\n    convertBase = function () {\n      var decimal = '0123456789';\n\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\n        var j,\n            arr = [0],\n            arrL,\n            i = 0,\n            len = str.length;\n\n        for (; i < len;) {\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn) {}\n\n          arr[0] += alphabet.indexOf(str.charAt(i++));\n\n          for (j = 0; j < arr.length; j++) {\n\n            if (arr[j] > baseOut - 1) {\n              if (arr[j + 1] == null) arr[j + 1] = 0;\n              arr[j + 1] += arr[j] / baseOut | 0;\n              arr[j] %= baseOut;\n            }\n          }\n        }\n\n        return arr.reverse();\n      }\n\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\n      // If the caller is toString, we are converting from base 10 to baseOut.\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\n        var alphabet,\n            d,\n            e,\n            k,\n            r,\n            x,\n            xc,\n            y,\n            i = str.indexOf('.'),\n            dp = DECIMAL_PLACES,\n            rm = ROUNDING_MODE;\n\n        // Non-integer.\n        if (i >= 0) {\n          k = POW_PRECISION;\n\n          // Unlimited precision.\n          POW_PRECISION = 0;\n          str = str.replace('.', '');\n          y = new BigNumber(baseIn);\n          x = y.pow(str.length - i);\n          POW_PRECISION = k;\n\n          // Convert str as if an integer, then restore the fraction part by dividing the\n          // result by its base raised to a power.\n\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'), 10, baseOut, decimal);\n          y.e = y.c.length;\n        }\n\n        // Convert the number as integer.\n\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET));\n\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\n        e = k = xc.length;\n\n        // Remove trailing zeros.\n        for (; xc[--k] == 0; xc.pop()) {}\n\n        // Zero?\n        if (!xc[0]) return alphabet.charAt(0);\n\n        // Does str represent an integer? If so, no need for the division.\n        if (i < 0) {\n          --e;\n        } else {\n          x.c = xc;\n          x.e = e;\n\n          // The sign is needed for correct rounding.\n          x.s = sign;\n          x = div(x, y, dp, rm, baseOut);\n          xc = x.c;\n          r = x.r;\n          e = x.e;\n        }\n\n        // xc now represents str converted to baseOut.\n\n        // THe index of the rounding digit.\n        d = e + dp + 1;\n\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\n        i = xc[d];\n\n        // Look at the rounding digits and mode to determine whether to round up.\n\n        k = baseOut / 2;\n        r = r || d < 0 || xc[d + 1] != null;\n\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));\n\n        // If the index of the rounding digit is not greater than zero, or xc represents\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\n        // such as 0.00001.\n        if (d < 1 || !xc[0]) {\n\n          // 1^-dp or 0\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\n        } else {\n\n          // Truncate xc to the required number of decimal places.\n          xc.length = d;\n\n          // Round up?\n          if (r) {\n\n            // Rounding up may mean the previous digit has to be rounded up and so on.\n            for (--baseOut; ++xc[--d] > baseOut;) {\n              xc[d] = 0;\n\n              if (!d) {\n                ++e;\n                xc = [1].concat(xc);\n              }\n            }\n          }\n\n          // Determine trailing zeros.\n          for (k = xc.length; !xc[--k];) {}\n\n          // E.g. [4, 11, 15] becomes 4bf.\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++])) {}\n\n          // Add leading zeros, decimal point and trailing zeros as required.\n          str = toFixedPoint(str, e, alphabet.charAt(0));\n        }\n\n        // The caller will add the sign.\n        return str;\n      };\n    }();\n\n    // Perform division in the specified base. Called by div and convertBase.\n    div = function () {\n\n      // Assume non-zero x and k.\n      function multiply(x, k, base) {\n        var m,\n            temp,\n            xlo,\n            xhi,\n            carry = 0,\n            i = x.length,\n            klo = k % SQRT_BASE,\n            khi = k / SQRT_BASE | 0;\n\n        for (x = x.slice(); i--;) {\n          xlo = x[i] % SQRT_BASE;\n          xhi = x[i] / SQRT_BASE | 0;\n          m = khi * xlo + xhi * klo;\n          temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\n          x[i] = temp % base;\n        }\n\n        if (carry) x = [carry].concat(x);\n\n        return x;\n      }\n\n      function compare(a, b, aL, bL) {\n        var i, cmp;\n\n        if (aL != bL) {\n          cmp = aL > bL ? 1 : -1;\n        } else {\n\n          for (i = cmp = 0; i < aL; i++) {\n\n            if (a[i] != b[i]) {\n              cmp = a[i] > b[i] ? 1 : -1;\n              break;\n            }\n          }\n        }\n\n        return cmp;\n      }\n\n      function subtract(a, b, aL, base) {\n        var i = 0;\n\n        // Subtract b from a.\n        for (; aL--;) {\n          a[aL] -= i;\n          i = a[aL] < b[aL] ? 1 : 0;\n          a[aL] = i * base + a[aL] - b[aL];\n        }\n\n        // Remove leading zeros.\n        for (; !a[0] && a.length > 1; a.splice(0, 1)) {}\n      }\n\n      // x: dividend, y: divisor.\n      return function (x, y, dp, rm, base) {\n        var cmp,\n            e,\n            i,\n            more,\n            n,\n            prod,\n            prodL,\n            q,\n            qc,\n            rem,\n            remL,\n            rem0,\n            xi,\n            xL,\n            yc0,\n            yL,\n            yz,\n            s = x.s == y.s ? 1 : -1,\n            xc = x.c,\n            yc = y.c;\n\n        // Either NaN, Infinity or 0?\n        if (!xc || !xc[0] || !yc || !yc[0]) {\n\n          return new BigNumber(\n\n          // Return NaN if either NaN, or both Infinity or 0.\n          !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\n\n          // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\n          xc && xc[0] == 0 || !yc ? s * 0 : s / 0);\n        }\n\n        q = new BigNumber(s);\n        qc = q.c = [];\n        e = x.e - y.e;\n        s = dp + e + 1;\n\n        if (!base) {\n          base = BASE;\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\n          s = s / LOG_BASE | 0;\n        }\n\n        // Result exponent may be one less then the current value of e.\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\n        for (i = 0; yc[i] == (xc[i] || 0); i++) {}\n\n        if (yc[i] > (xc[i] || 0)) e--;\n\n        if (s < 0) {\n          qc.push(1);\n          more = true;\n        } else {\n          xL = xc.length;\n          yL = yc.length;\n          i = 0;\n          s += 2;\n\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\n\n          n = mathfloor(base / (yc[0] + 1));\n\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\n          if (n > 1) {\n            yc = multiply(yc, n, base);\n            xc = multiply(xc, n, base);\n            yL = yc.length;\n            xL = xc.length;\n          }\n\n          xi = yL;\n          rem = xc.slice(0, yL);\n          remL = rem.length;\n\n          // Add zeros to make remainder as long as divisor.\n          for (; remL < yL; rem[remL++] = 0) {}\n          yz = yc.slice();\n          yz = [0].concat(yz);\n          yc0 = yc[0];\n          if (yc[1] >= base / 2) yc0++;\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\n\n          do {\n            n = 0;\n\n            // Compare divisor and remainder.\n            cmp = compare(yc, rem, yL, remL);\n\n            // If divisor < remainder.\n            if (cmp < 0) {\n\n              // Calculate trial digit, n.\n\n              rem0 = rem[0];\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\n\n              // n is how many times the divisor goes into the current remainder.\n              n = mathfloor(rem0 / yc0);\n\n              //  Algorithm:\n              //  product = divisor multiplied by trial digit (n).\n              //  Compare product and remainder.\n              //  If product is greater than remainder:\n              //    Subtract divisor from product, decrement trial digit.\n              //  Subtract product from remainder.\n              //  If product was less than remainder at the last compare:\n              //    Compare new remainder and divisor.\n              //    If remainder is greater than divisor:\n              //      Subtract divisor from remainder, increment trial digit.\n\n              if (n > 1) {\n\n                // n may be > base only when base is 3.\n                if (n >= base) n = base - 1;\n\n                // product = divisor * trial digit.\n                prod = multiply(yc, n, base);\n                prodL = prod.length;\n                remL = rem.length;\n\n                // Compare product and remainder.\n                // If product > remainder then trial digit n too high.\n                // n is 1 too high about 5% of the time, and is not known to have\n                // ever been more than 1 too high.\n                while (compare(prod, rem, prodL, remL) == 1) {\n                  n--;\n\n                  // Subtract divisor from product.\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\n                  prodL = prod.length;\n                  cmp = 1;\n                }\n              } else {\n\n                // n is 0 or 1, cmp is -1.\n                // If n is 0, there is no need to compare yc and rem again below,\n                // so change cmp to 1 to avoid it.\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\n                if (n == 0) {\n\n                  // divisor < remainder, so n must be at least 1.\n                  cmp = n = 1;\n                }\n\n                // product = divisor\n                prod = yc.slice();\n                prodL = prod.length;\n              }\n\n              if (prodL < remL) prod = [0].concat(prod);\n\n              // Subtract product from remainder.\n              subtract(rem, prod, remL, base);\n              remL = rem.length;\n\n              // If product was < remainder.\n              if (cmp == -1) {\n\n                // Compare divisor and new remainder.\n                // If divisor < new remainder, subtract divisor from remainder.\n                // Trial digit n too low.\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\n                while (compare(yc, rem, yL, remL) < 1) {\n                  n++;\n\n                  // Subtract divisor from remainder.\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\n                  remL = rem.length;\n                }\n              }\n            } else if (cmp === 0) {\n              n++;\n              rem = [0];\n            } // else cmp === 1 and n will be 0\n\n            // Add the next digit, n, to the result array.\n            qc[i++] = n;\n\n            // Update the remainder.\n            if (rem[0]) {\n              rem[remL++] = xc[xi] || 0;\n            } else {\n              rem = [xc[xi]];\n              remL = 1;\n            }\n          } while ((xi++ < xL || rem[0] != null) && s--);\n\n          more = rem[0] != null;\n\n          // Leading zero?\n          if (!qc[0]) qc.splice(0, 1);\n        }\n\n        if (base == BASE) {\n\n          // To calculate q.e, first get the number of digits of qc[0].\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++) {}\n\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\n\n          // Caller is convertBase.\n        } else {\n          q.e = e;\n          q.r = +more;\n        }\n\n        return q;\n      };\n    }();\n\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\n    function format(n, i, rm, id) {\n      var c0, e, ne, len, str;\n\n      if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n\n      if (!n.c) return n.toString();\n\n      c0 = n.c[0];\n      ne = n.e;\n\n      if (i == null) {\n        str = coeffToString(n.c);\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS) ? toExponential(str, ne) : toFixedPoint(str, ne, '0');\n      } else {\n        n = round(new BigNumber(n), i, rm);\n\n        // n.e may have changed if the value was rounded up.\n        e = n.e;\n\n        str = coeffToString(n.c);\n        len = str.length;\n\n        // toPrecision returns exponential notation if the number of significant digits\n        // specified is less than the number of digits necessary to represent the integer\n        // part of the value in fixed-point notation.\n\n        // Exponential notation.\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\n\n          // Append zeros?\n          for (; len < i; str += '0', len++) {}\n          str = toExponential(str, e);\n\n          // Fixed-point notation.\n        } else {\n          i -= ne;\n          str = toFixedPoint(str, e, '0');\n\n          // Append zeros?\n          if (e + 1 > len) {\n            if (--i > 0) for (str += '.'; i--; str += '0') {}\n          } else {\n            i += e - len;\n            if (i > 0) {\n              if (e + 1 == len) str += '.';\n              for (; i--; str += '0') {}\n            }\n          }\n        }\n      }\n\n      return n.s < 0 && c0 ? '-' + str : str;\n    }\n\n    // Handle BigNumber.max and BigNumber.min.\n    function maxOrMin(args, method) {\n      var n,\n          i = 1,\n          m = new BigNumber(args[0]);\n\n      for (; i < args.length; i++) {\n        n = new BigNumber(args[i]);\n\n        // If any number is NaN, return NaN.\n        if (!n.s) {\n          m = n;\n          break;\n        } else if (method.call(m, n)) {\n          m = n;\n        }\n      }\n\n      return m;\n    }\n\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\n    function normalise(n, c, e) {\n      var i = 1,\n          j = c.length;\n\n      // Remove trailing zeros.\n      for (; !c[--j]; c.pop()) {}\n\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\n      for (j = c[0]; j >= 10; j /= 10, i++) {}\n\n      // Overflow?\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\n\n        // Infinity.\n        n.c = n.e = null;\n\n        // Underflow?\n      } else if (e < MIN_EXP) {\n\n        // Zero.\n        n.c = [n.e = 0];\n      } else {\n        n.e = e;\n        n.c = c;\n      }\n\n      return n;\n    }\n\n    // Handle values that fail the validity test in BigNumber.\n    parseNumeric = function () {\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\n          dotAfter = /^([^.]+)\\.$/,\n          dotBefore = /^\\.([^.]+)$/,\n          isInfinityOrNaN = /^-?(Infinity|NaN)$/,\n          whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\n\n      return function (x, str, isNum, b) {\n        var base,\n            s = isNum ? str : str.replace(whitespaceOrPlus, '');\n\n        // No exception on ±Infinity or NaN.\n        if (isInfinityOrNaN.test(s)) {\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\n        } else {\n          if (!isNum) {\n\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\n            s = s.replace(basePrefix, function (m, p1, p2) {\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\n              return !b || b == base ? p1 : m;\n            });\n\n            if (b) {\n              base = b;\n\n              // E.g. '1.' to '1', '.1' to '0.1'\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\n            }\n\n            if (str != s) return new BigNumber(s, base);\n          }\n\n          // '[BigNumber Error] Not a number: {n}'\n          // '[BigNumber Error] Not a base {b} number: {n}'\n          if (BigNumber.DEBUG) {\n            throw Error(bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\n          }\n\n          // NaN\n          x.s = null;\n        }\n\n        x.c = x.e = null;\n      };\n    }();\n\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\n    function round(x, sd, rm, r) {\n      var d,\n          i,\n          j,\n          k,\n          n,\n          ni,\n          rd,\n          xc = x.c,\n          pows10 = POWS_TEN;\n\n      // if x is not Infinity or NaN...\n      if (xc) {\n\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\n        // ni is the index of n within x.c.\n        // d is the number of digits of n.\n        // i is the index of rd within n including leading zeros.\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\n        out: {\n\n          // Get the number of digits of the first element of xc.\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++) {}\n          i = sd - d;\n\n          // If the rounding digit is in the first element of xc...\n          if (i < 0) {\n            i += LOG_BASE;\n            j = sd;\n            n = xc[ni = 0];\n\n            // Get the rounding digit at index j of n.\n            rd = n / pows10[d - j - 1] % 10 | 0;\n          } else {\n            ni = mathceil((i + 1) / LOG_BASE);\n\n            if (ni >= xc.length) {\n\n              if (r) {\n\n                // Needed by sqrt.\n                for (; xc.length <= ni; xc.push(0)) {}\n                n = rd = 0;\n                d = 1;\n                i %= LOG_BASE;\n                j = i - LOG_BASE + 1;\n              } else {\n                break out;\n              }\n            } else {\n              n = k = xc[ni];\n\n              // Get the number of digits of n.\n              for (d = 1; k >= 10; k /= 10, d++) {}\n\n              // Get the index of rd within n.\n              i %= LOG_BASE;\n\n              // Get the index of rd within n, adjusted for leading zeros.\n              // The number of leading zeros of n is given by LOG_BASE - d.\n              j = i - LOG_BASE + d;\n\n              // Get the rounding digit at index j of n.\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\n            }\n          }\n\n          r = r || sd < 0 ||\n\n          // Are there any non-zero digits after the rounding digit?\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\n          xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\n\n          r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\n\n          // Check whether the digit to the left of the rounding digit is odd.\n          (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));\n\n          if (sd < 1 || !xc[0]) {\n            xc.length = 0;\n\n            if (r) {\n\n              // Convert sd to decimal places.\n              sd -= x.e + 1;\n\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\n              x.e = -sd || 0;\n            } else {\n\n              // Zero.\n              xc[0] = x.e = 0;\n            }\n\n            return x;\n          }\n\n          // Remove excess digits.\n          if (i == 0) {\n            xc.length = ni;\n            k = 1;\n            ni--;\n          } else {\n            xc.length = ni + 1;\n            k = pows10[LOG_BASE - i];\n\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n            // j > 0 means i > number of leading zeros of n.\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\n          }\n\n          // Round up?\n          if (r) {\n\n            for (;;) {\n\n              // If the digit to be rounded up is in the first element of xc...\n              if (ni == 0) {\n\n                // i will be the length of xc[0] before k is added.\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++) {}\n                j = xc[0] += k;\n                for (k = 1; j >= 10; j /= 10, k++) {}\n\n                // if i != k the length has increased.\n                if (i != k) {\n                  x.e++;\n                  if (xc[0] == BASE) xc[0] = 1;\n                }\n\n                break;\n              } else {\n                xc[ni] += k;\n                if (xc[ni] != BASE) break;\n                xc[ni--] = 0;\n                k = 1;\n              }\n            }\n          }\n\n          // Remove trailing zeros.\n          for (i = xc.length; xc[--i] === 0; xc.pop()) {}\n        }\n\n        // Overflow? Infinity.\n        if (x.e > MAX_EXP) {\n          x.c = x.e = null;\n\n          // Underflow? Zero.\n        } else if (x.e < MIN_EXP) {\n          x.c = [x.e = 0];\n        }\n      }\n\n      return x;\n    }\n\n    function valueOf(n) {\n      var str,\n          e = n.e;\n\n      if (e === null) return n.toString();\n\n      str = coeffToString(n.c);\n\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, '0');\n\n      return n.s < 0 ? '-' + str : str;\n    }\n\n    // PROTOTYPE/INSTANCE METHODS\n\n\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\n    P.absoluteValue = P.abs = function () {\n      var x = new BigNumber(this);\n      if (x.s < 0) x.s = 1;\n      return x;\n    };\n\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\n    P.comparedTo = function (y, b) {\n      return compare(this, new BigNumber(y, b));\n    };\n\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\n    P.decimalPlaces = P.dp = function (dp, rm) {\n      var c,\n          n,\n          v,\n          x = this;\n\n      if (dp != null) {\n        intCheck(dp, 0, MAX);\n        if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n\n        return round(new BigNumber(x), dp + x.e + 1, rm);\n      }\n\n      if (!(c = x.c)) return null;\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\n\n      // Subtract the number of trailing zeros of the last number.\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--) {}\n      if (n < 0) n = 0;\n\n      return n;\n    };\n\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\n    P.dividedBy = P.div = function (y, b) {\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\n    };\n\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\n      return div(this, new BigNumber(y, b), 0, 1);\n    };\n\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\n    P.exponentiatedBy = P.pow = function (n, m) {\n      var half,\n          isModExp,\n          i,\n          k,\n          more,\n          nIsBig,\n          nIsNeg,\n          nIsOdd,\n          y,\n          x = this;\n\n      n = new BigNumber(n);\n\n      // Allow NaN and ±Infinity, but not other non-integers.\n      if (n.c && !n.isInteger()) {\n        throw Error(bignumberError + 'Exponent not an integer: ' + valueOf(n));\n      }\n\n      if (m != null) m = new BigNumber(m);\n\n      // Exponent of MAX_SAFE_INTEGER is 15.\n      nIsBig = n.e > 14;\n\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\n\n        // The sign of the result of pow when x is negative depends on the evenness of n.\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\n        return m ? y.mod(m) : y;\n      }\n\n      nIsNeg = n.s < 0;\n\n      if (m) {\n\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\n\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\n\n        if (isModExp) x = x.mod(m);\n\n        // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\n        // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\n      // [1, 240000000]\n      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\n      // [80000000000000]  [99999750000000]\n      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\n\n        // If x is negative and n is odd, k = -0, else k = 0.\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\n\n        // If x >= 1, k = ±Infinity.\n        if (x.e > -1) k = 1 / k;\n\n        // If n is negative return ±0, else return ±Infinity.\n        return new BigNumber(nIsNeg ? 1 / k : k);\n      } else if (POW_PRECISION) {\n\n        // Truncating each coefficient array to a length of k after each multiplication\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\n        // i.e. there will be a minimum of 28 guard digits retained.\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\n      }\n\n      if (nIsBig) {\n        half = new BigNumber(0.5);\n        if (nIsNeg) n.s = 1;\n        nIsOdd = isOdd(n);\n      } else {\n        i = Math.abs(+valueOf(n));\n        nIsOdd = i % 2;\n      }\n\n      y = new BigNumber(ONE);\n\n      // Performs 54 loop iterations for n of 9007199254740991.\n      for (;;) {\n\n        if (nIsOdd) {\n          y = y.times(x);\n          if (!y.c) break;\n\n          if (k) {\n            if (y.c.length > k) y.c.length = k;\n          } else if (isModExp) {\n            y = y.mod(m); //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\n          }\n        }\n\n        if (i) {\n          i = mathfloor(i / 2);\n          if (i === 0) break;\n          nIsOdd = i % 2;\n        } else {\n          n = n.times(half);\n          round(n, n.e + 1, 1);\n\n          if (n.e > 14) {\n            nIsOdd = isOdd(n);\n          } else {\n            i = +valueOf(n);\n            if (i === 0) break;\n            nIsOdd = i % 2;\n          }\n        }\n\n        x = x.times(x);\n\n        if (k) {\n          if (x.c && x.c.length > k) x.c.length = k;\n        } else if (isModExp) {\n          x = x.mod(m); //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\n        }\n      }\n\n      if (isModExp) return y;\n      if (nIsNeg) y = ONE.div(y);\n\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\n    };\n\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\n    P.integerValue = function (rm) {\n      var n = new BigNumber(this);\n      if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n      return round(n, n.e + 1, rm);\n    };\n\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\n    P.isEqualTo = P.eq = function (y, b) {\n      return compare(this, new BigNumber(y, b)) === 0;\n    };\n\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\n    P.isFinite = function () {\n      return !!this.c;\n    };\n\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\n    P.isGreaterThan = P.gt = function (y, b) {\n      return compare(this, new BigNumber(y, b)) > 0;\n    };\n\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\n    };\n\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\n    P.isInteger = function () {\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\n    };\n\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\n    P.isLessThan = P.lt = function (y, b) {\n      return compare(this, new BigNumber(y, b)) < 0;\n    };\n\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\n    };\n\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\n    P.isNaN = function () {\n      return !this.s;\n    };\n\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\n    P.isNegative = function () {\n      return this.s < 0;\n    };\n\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\n    P.isPositive = function () {\n      return this.s > 0;\n    };\n\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\n    P.isZero = function () {\n      return !!this.c && this.c[0] == 0;\n    };\n\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\n    P.minus = function (y, b) {\n      var i,\n          j,\n          t,\n          xLTy,\n          x = this,\n          a = x.s;\n\n      y = new BigNumber(y, b);\n      b = y.s;\n\n      // Either NaN?\n      if (!a || !b) return new BigNumber(NaN);\n\n      // Signs differ?\n      if (a != b) {\n        y.s = -b;\n        return x.plus(y);\n      }\n\n      var xe = x.e / LOG_BASE,\n          ye = y.e / LOG_BASE,\n          xc = x.c,\n          yc = y.c;\n\n      if (!xe || !ye) {\n\n        // Either Infinity?\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\n\n        // Either zero?\n        if (!xc[0] || !yc[0]) {\n\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\n\n          // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\n          ROUNDING_MODE == 3 ? -0 : 0);\n        }\n      }\n\n      xe = bitFloor(xe);\n      ye = bitFloor(ye);\n      xc = xc.slice();\n\n      // Determine which is the bigger number.\n      if (a = xe - ye) {\n\n        if (xLTy = a < 0) {\n          a = -a;\n          t = xc;\n        } else {\n          ye = xe;\n          t = yc;\n        }\n\n        t.reverse();\n\n        // Prepend zeros to equalise exponents.\n        for (b = a; b--; t.push(0)) {}\n        t.reverse();\n      } else {\n\n        // Exponents equal. Check digit by digit.\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\n\n        for (a = b = 0; b < j; b++) {\n\n          if (xc[b] != yc[b]) {\n            xLTy = xc[b] < yc[b];\n            break;\n          }\n        }\n      }\n\n      // x < y? Point xc to the array of the bigger number.\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\n\n      b = (j = yc.length) - (i = xc.length);\n\n      // Append zeros to xc if shorter.\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\n      if (b > 0) for (; b--; xc[i++] = 0) {}\n      b = BASE - 1;\n\n      // Subtract yc from xc.\n      for (; j > a;) {\n\n        if (xc[--j] < yc[j]) {\n          for (i = j; i && !xc[--i]; xc[i] = b) {}\n          --xc[i];\n          xc[j] += BASE;\n        }\n\n        xc[j] -= yc[j];\n      }\n\n      // Remove leading zeros and adjust exponent accordingly.\n      for (; xc[0] == 0; xc.splice(0, 1), --ye) {}\n\n      // Zero?\n      if (!xc[0]) {\n\n        // Following IEEE 754 (2008) 6.3,\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\n        y.c = [y.e = 0];\n        return y;\n      }\n\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\n      // for finite x and y.\n      return normalise(y, xc, ye);\n    };\n\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\n    P.modulo = P.mod = function (y, b) {\n      var q,\n          s,\n          x = this;\n\n      y = new BigNumber(y, b);\n\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\n      if (!x.c || !y.s || y.c && !y.c[0]) {\n        return new BigNumber(NaN);\n\n        // Return x if y is Infinity or x is zero.\n      } else if (!y.c || x.c && !x.c[0]) {\n        return new BigNumber(x);\n      }\n\n      if (MODULO_MODE == 9) {\n\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\n        // r = x - qy    where  0 <= r < abs(y)\n        s = y.s;\n        y.s = 1;\n        q = div(x, y, 0, 3);\n        y.s = s;\n        q.s *= s;\n      } else {\n        q = div(x, y, 0, MODULO_MODE);\n      }\n\n      y = x.minus(q.times(y));\n\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\n\n      return y;\n    };\n\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\n    P.multipliedBy = P.times = function (y, b) {\n      var c,\n          e,\n          i,\n          j,\n          k,\n          m,\n          xcL,\n          xlo,\n          xhi,\n          ycL,\n          ylo,\n          yhi,\n          zc,\n          base,\n          sqrtBase,\n          x = this,\n          xc = x.c,\n          yc = (y = new BigNumber(y, b)).c;\n\n      // Either NaN, ±Infinity or ±0?\n      if (!xc || !yc || !xc[0] || !yc[0]) {\n\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\n          y.c = y.e = y.s = null;\n        } else {\n          y.s *= x.s;\n\n          // Return ±Infinity if either is ±Infinity.\n          if (!xc || !yc) {\n            y.c = y.e = null;\n\n            // Return ±0 if either is ±0.\n          } else {\n            y.c = [0];\n            y.e = 0;\n          }\n        }\n\n        return y;\n      }\n\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\n      y.s *= x.s;\n      xcL = xc.length;\n      ycL = yc.length;\n\n      // Ensure xc points to longer array and xcL to its length.\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\n\n      // Initialise the result array with zeros.\n      for (i = xcL + ycL, zc = []; i--; zc.push(0)) {}\n\n      base = BASE;\n      sqrtBase = SQRT_BASE;\n\n      for (i = ycL; --i >= 0;) {\n        c = 0;\n        ylo = yc[i] % sqrtBase;\n        yhi = yc[i] / sqrtBase | 0;\n\n        for (k = xcL, j = i + k; j > i;) {\n          xlo = xc[--k] % sqrtBase;\n          xhi = xc[k] / sqrtBase | 0;\n          m = yhi * xlo + xhi * ylo;\n          xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\n          zc[j--] = xlo % base;\n        }\n\n        zc[j] = c;\n      }\n\n      if (c) {\n        ++e;\n      } else {\n        zc.splice(0, 1);\n      }\n\n      return normalise(y, zc, e);\n    };\n\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\n    P.negated = function () {\n      var x = new BigNumber(this);\n      x.s = -x.s || null;\n      return x;\n    };\n\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\n    P.plus = function (y, b) {\n      var t,\n          x = this,\n          a = x.s;\n\n      y = new BigNumber(y, b);\n      b = y.s;\n\n      // Either NaN?\n      if (!a || !b) return new BigNumber(NaN);\n\n      // Signs differ?\n      if (a != b) {\n        y.s = -b;\n        return x.minus(y);\n      }\n\n      var xe = x.e / LOG_BASE,\n          ye = y.e / LOG_BASE,\n          xc = x.c,\n          yc = y.c;\n\n      if (!xe || !ye) {\n\n        // Return ±Infinity if either ±Infinity.\n        if (!xc || !yc) return new BigNumber(a / 0);\n\n        // Either zero?\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\n      }\n\n      xe = bitFloor(xe);\n      ye = bitFloor(ye);\n      xc = xc.slice();\n\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\n      if (a = xe - ye) {\n        if (a > 0) {\n          ye = xe;\n          t = yc;\n        } else {\n          a = -a;\n          t = xc;\n        }\n\n        t.reverse();\n        for (; a--; t.push(0)) {}\n        t.reverse();\n      }\n\n      a = xc.length;\n      b = yc.length;\n\n      // Point xc to the longer array, and b to the shorter length.\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\n\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\n      for (a = 0; b;) {\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\n      }\n\n      if (a) {\n        xc = [a].concat(xc);\n        ++ye;\n      }\n\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n      // ye = MAX_EXP + 1 possible\n      return normalise(y, xc, ye);\n    };\n\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\n    P.precision = P.sd = function (sd, rm) {\n      var c,\n          n,\n          v,\n          x = this;\n\n      if (sd != null && sd !== !!sd) {\n        intCheck(sd, 1, MAX);\n        if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n\n        return round(new BigNumber(x), sd, rm);\n      }\n\n      if (!(c = x.c)) return null;\n      v = c.length - 1;\n      n = v * LOG_BASE + 1;\n\n      if (v = c[v]) {\n\n        // Subtract the number of trailing zeros of the last element.\n        for (; v % 10 == 0; v /= 10, n--) {}\n\n        // Add the number of digits of the first element.\n        for (v = c[0]; v >= 10; v /= 10, n++) {}\n      }\n\n      if (sd && x.e + 1 > n) n = x.e + 1;\n\n      return n;\n    };\n\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\n    P.shiftedBy = function (k) {\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\n      return this.times('1e' + k);\n    };\n\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\n    P.squareRoot = P.sqrt = function () {\n      var m,\n          n,\n          r,\n          rep,\n          t,\n          x = this,\n          c = x.c,\n          s = x.s,\n          e = x.e,\n          dp = DECIMAL_PLACES + 4,\n          half = new BigNumber('0.5');\n\n      // Negative/NaN/Infinity/zero?\n      if (s !== 1 || !c || !c[0]) {\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\n      }\n\n      // Initial estimate.\n      s = Math.sqrt(+valueOf(x));\n\n      // Math.sqrt underflow/overflow?\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n      if (s == 0 || s == 1 / 0) {\n        n = coeffToString(c);\n        if ((n.length + e) % 2 == 0) n += '0';\n        s = Math.sqrt(+n);\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\n\n        if (s == 1 / 0) {\n          n = '1e' + e;\n        } else {\n          n = s.toExponential();\n          n = n.slice(0, n.indexOf('e') + 1) + e;\n        }\n\n        r = new BigNumber(n);\n      } else {\n        r = new BigNumber(s + '');\n      }\n\n      // Check for zero.\n      // r could be zero if MIN_EXP is changed after the this value was created.\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\n      // coeffToString to throw.\n      if (r.c[0]) {\n        e = r.e;\n        s = e + dp;\n        if (s < 3) s = 0;\n\n        // Newton-Raphson iteration.\n        for (;;) {\n          t = r;\n          r = half.times(t.plus(div(x, t, dp, 1)));\n\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\n\n            // The exponent of r may here be one less than the final result exponent,\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\n            // are indexed correctly.\n            if (r.e < e) --s;\n            n = n.slice(s - 3, s + 1);\n\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\n            // iteration.\n            if (n == '9999' || !rep && n == '4999') {\n\n              // On the first iteration only, check to see if rounding up gives the\n              // exact result as the nines may infinitely repeat.\n              if (!rep) {\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\n\n                if (t.times(t).eq(x)) {\n                  r = t;\n                  break;\n                }\n              }\n\n              dp += 4;\n              s += 4;\n              rep = 1;\n            } else {\n\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\n              // result. If not, then there are further digits and m will be truthy.\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n\n                // Truncate to the first rounding digit.\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\n                m = !r.times(r).eq(x);\n              }\n\n              break;\n            }\n          }\n        }\n      }\n\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\n    };\n\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\n    P.toExponential = function (dp, rm) {\n      if (dp != null) {\n        intCheck(dp, 0, MAX);\n        dp++;\n      }\n      return format(this, dp, rm, 1);\n    };\n\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\n    P.toFixed = function (dp, rm) {\n      if (dp != null) {\n        intCheck(dp, 0, MAX);\n        dp = dp + this.e + 1;\n      }\n      return format(this, dp, rm);\n    };\n\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\n    P.toFormat = function (dp, rm, format) {\n      var str,\n          x = this;\n\n      if (format == null) {\n        if (dp != null && rm && typeof rm == 'object') {\n          format = rm;\n          rm = null;\n        } else if (dp && typeof dp == 'object') {\n          format = dp;\n          dp = rm = null;\n        } else {\n          format = FORMAT;\n        }\n      } else if (typeof format != 'object') {\n        throw Error(bignumberError + 'Argument not an object: ' + format);\n      }\n\n      str = x.toFixed(dp, rm);\n\n      if (x.c) {\n        var i,\n            arr = str.split('.'),\n            g1 = +format.groupSize,\n            g2 = +format.secondaryGroupSize,\n            groupSeparator = format.groupSeparator || '',\n            intPart = arr[0],\n            fractionPart = arr[1],\n            isNeg = x.s < 0,\n            intDigits = isNeg ? intPart.slice(1) : intPart,\n            len = intDigits.length;\n\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\n\n        if (g1 > 0 && len > 0) {\n          i = len % g1 || g1;\n          intPart = intDigits.substr(0, i);\n          for (; i < len; i += g1) {\n            intPart += groupSeparator + intDigits.substr(i, g1);\n          }if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\n          if (isNeg) intPart = '-' + intPart;\n        }\n\n        str = fractionPart ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize) ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'), '$&' + (format.fractionGroupSeparator || '')) : fractionPart) : intPart;\n      }\n\n      return (format.prefix || '') + str + (format.suffix || '');\n    };\n\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\n    P.toFraction = function (md) {\n      var d,\n          d0,\n          d1,\n          d2,\n          e,\n          exp,\n          n,\n          n0,\n          n1,\n          q,\n          r,\n          s,\n          x = this,\n          xc = x.c;\n\n      if (md != null) {\n        n = new BigNumber(md);\n\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\n          throw Error(bignumberError + 'Argument ' + (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\n        }\n      }\n\n      if (!xc) return new BigNumber(x);\n\n      d = new BigNumber(ONE);\n      n1 = d0 = new BigNumber(ONE);\n      d1 = n0 = new BigNumber(ONE);\n      s = coeffToString(xc);\n\n      // Determine initial denominator.\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\n      e = d.e = s.length - x.e - 1;\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\n      md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;\n\n      exp = MAX_EXP;\n      MAX_EXP = 1 / 0;\n      n = new BigNumber(s);\n\n      // n0 = d1 = 0\n      n0.c[0] = 0;\n\n      for (;;) {\n        q = div(n, d, 0, 1);\n        d2 = d0.plus(q.times(d1));\n        if (d2.comparedTo(md) == 1) break;\n        d0 = d1;\n        d1 = d2;\n        n1 = n0.plus(q.times(d2 = n1));\n        n0 = d2;\n        d = n.minus(q.times(d2 = d));\n        n = d2;\n      }\n\n      d2 = div(md.minus(d0), d1, 0, 1);\n      n0 = n0.plus(d2.times(n1));\n      d0 = d0.plus(d2.times(d1));\n      n0.s = n1.s = x.s;\n      e = e * 2;\n\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\n\n      MAX_EXP = exp;\n\n      return r;\n    };\n\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\n    P.toNumber = function () {\n      return +valueOf(this);\n    };\n\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\n    P.toPrecision = function (sd, rm) {\n      if (sd != null) intCheck(sd, 1, MAX);\n      return format(this, sd, rm, 2);\n    };\n\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\n    P.toString = function (b) {\n      var str,\n          n = this,\n          s = n.s,\n          e = n.e;\n\n      // Infinity or NaN?\n      if (e === null) {\n        if (s) {\n          str = 'Infinity';\n          if (s < 0) str = '-' + str;\n        } else {\n          str = 'NaN';\n        }\n      } else {\n        if (b == null) {\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(coeffToString(n.c), e) : toFixedPoint(coeffToString(n.c), e, '0');\n        } else if (b === 10) {\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\n        } else {\n          intCheck(b, 2, ALPHABET.length, 'Base');\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\n        }\n\n        if (s < 0 && n.c[0]) str = '-' + str;\n      }\n\n      return str;\n    };\n\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\n    P.valueOf = P.toJSON = function () {\n      return valueOf(this);\n    };\n\n    P._isBigNumber = true;\n\n    if (hasSymbol) {\n      P[Symbol.toStringTag] = 'BigNumber';\n\n      // Node.js v10.12.0+\n      P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\n    }\n\n    if (configObject != null) BigNumber.set(configObject);\n\n    return BigNumber;\n  }\n\n  // PRIVATE HELPER FUNCTIONS\n\n  // These functions don't need access to variables,\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\n\n\n  function bitFloor(n) {\n    var i = n | 0;\n    return n > 0 || n === i ? i : i - 1;\n  }\n\n  // Return a coefficient array as a string of base 10 digits.\n  function coeffToString(a) {\n    var s,\n        z,\n        i = 1,\n        j = a.length,\n        r = a[0] + '';\n\n    for (; i < j;) {\n      s = a[i++] + '';\n      z = LOG_BASE - s.length;\n      for (; z--; s = '0' + s) {}\n      r += s;\n    }\n\n    // Determine trailing zeros.\n    for (j = r.length; r.charCodeAt(--j) === 48;) {}\n\n    return r.slice(0, j + 1 || 1);\n  }\n\n  // Compare the value of BigNumbers x and y.\n  function compare(x, y) {\n    var a,\n        b,\n        xc = x.c,\n        yc = y.c,\n        i = x.s,\n        j = y.s,\n        k = x.e,\n        l = y.e;\n\n    // Either NaN?\n    if (!i || !j) return null;\n\n    a = xc && !xc[0];\n    b = yc && !yc[0];\n\n    // Either zero?\n    if (a || b) return a ? b ? 0 : -j : i;\n\n    // Signs differ?\n    if (i != j) return i;\n\n    a = i < 0;\n    b = k == l;\n\n    // Either Infinity?\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\n\n    // Compare exponents.\n    if (!b) return k > l ^ a ? 1 : -1;\n\n    j = (k = xc.length) < (l = yc.length) ? k : l;\n\n    // Compare digit by digit.\n    for (i = 0; i < j; i++) {\n      if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\n    } // Compare lengths.\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\n  }\n\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\n  function intCheck(n, min, max, name) {\n    if (n < min || n > max || n !== mathfloor(n)) {\n      throw Error(bignumberError + (name || 'Argument') + (typeof n == 'number' ? n < min || n > max ? ' out of range: ' : ' not an integer: ' : ' not a primitive number: ') + String(n));\n    }\n  }\n\n  // Assumes finite n.\n  function isOdd(n) {\n    var k = n.c.length - 1;\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\n  }\n\n  function toExponential(str, e) {\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) + (e < 0 ? 'e' : 'e+') + e;\n  }\n\n  function toFixedPoint(str, e, z) {\n    var len, zs;\n\n    // Negative exponent?\n    if (e < 0) {\n\n      // Prepend zeros.\n      for (zs = z + '.'; ++e; zs += z) {}\n      str = zs + str;\n\n      // Positive exponent\n    } else {\n      len = str.length;\n\n      // Append zeros.\n      if (++e > len) {\n        for (zs = z, e -= len; --e; zs += z) {}\n        str += zs;\n      } else if (e < len) {\n        str = str.slice(0, e) + '.' + str.slice(e);\n      }\n    }\n\n    return str;\n  }\n\n  // EXPORT\n\n\n  BigNumber = clone();\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\n\n  // AMD.\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return BigNumber;\n    }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n    // Node.js and other environments that support module.exports.\n  } else if (typeof module != 'undefined' && module.exports) {\n    module.exports = BigNumber;\n\n    // Browser.\n  } else {\n    if (!globalObject) {\n      globalObject = typeof self != 'undefined' && self ? self : window;\n    }\n\n    globalObject.BigNumber = BigNumber;\n  }\n})(this);\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// route-home.chunk.39af4.js","// removed by extract-text-webpack-plugin\nmodule.exports = {\"home\":\"home__2Q5nZ\"};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./routes/home/style.css\n// module id = ZAL5\n// module chunks = 0","import { h, Component } from \"preact\";\r\nimport style from \"./style\";\r\nimport BigBinom from \"bigbinom\";\r\n\r\nconst sumStrings = (str1, str2) =>\r\n  Number.parseFloat(str1) + Number.parseFloat(str2);\r\n\r\nconst getExpected = (str1, str2, str3) => {\r\n  const expected =\r\n    (Number.parseFloat(str1) * Number.parseFloat(str2)) /\r\n    Number.parseFloat(str3);\r\n\r\n  return expected.toFixed(2);\r\n};\r\n\r\nconst getRelative = (str1, str2) => {\r\n  const relative = (Number.parseFloat(str1) / Number.parseFloat(str2)) * 100;\r\n\r\n  return relative.toFixed(2);\r\n};\r\n\r\nconst getResidual = (str1, str2) => {\r\n  const residual =\r\n    (Number.parseFloat(str1) - Number.parseFloat(str2)) ** 2 /\r\n    Number.parseFloat(str2);\r\n  return residual.toFixed(3);\r\n};\r\n\r\nconst getChisquare = (str1, str2, str3, str4) => {\r\n  const chisquare =\r\n    Number.parseFloat(str1) +\r\n    Number.parseFloat(str2) +\r\n    Number.parseFloat(str3) +\r\n    Number.parseFloat(str4);\r\n  return chisquare.toFixed(3);\r\n};\r\n\r\nconst getPhisquare = (str1, str2) => {\r\n  const phisquare = Number.parseFloat(str1) / Number.parseFloat(str2);\r\n  return phisquare.toFixed(3);\r\n};\r\n\r\nfunction rFact(num) {\r\n  var rval = 1;\r\n  for (var i = 2; i <= num; i++) rval = rval * i;\r\n  return rval;\r\n}\r\n\r\nvar isSignificant = function(chisquare) {\r\n  if (chisquare < 3.841) {\r\n      return 'result is not significant';\r\n  } else {\r\n      return 'result is significant';\r\n  }\r\n};\r\n\r\nconst getFisher = (str1, str2, str3, str4, str5) => {\r\n  str1 = Number.parseFloat(str1);\r\n  str2 = Number.parseFloat(str2);\r\n  str3 = Number.parseFloat(str3);\r\n  str4 = Number.parseFloat(str4);\r\n\r\n  var bn1 = new BigBinom(str1 + str2, str1),\r\n      bn2 = new BigBinom(str3 + str4, str3),\r\n      bn3 = new BigBinom(str1 + str2 + str3 + str4, str1 + str3);\r\n\r\n  return bn1.times(bn2).dividedBy(bn3).toFixed(4);\r\n\r\n  // const sum1 =\r\n  //   rFact(Number.parseFloat(str1) + Number.parseFloat(str2)) *\r\n  //   rFact(Number.parseFloat(str3) + Number.parseFloat(str4)) *\r\n  //   rFact(Number.parseFloat(str1) + Number.parseFloat(str3)) *\r\n  //   rFact(Number.parseFloat(str2) + Number.parseFloat(str4));\r\n  // console.log(sum1);\r\n\r\n  // const sum2 =\r\n  //   rFact(Number.parseFloat(str2)) *\r\n  //   rFact(Number.parseFloat(str3)) *\r\n  //   rFact(Number.parseFloat(str4)) *\r\n  //   rFact(Number.parseFloat(str5));\r\n\r\n  // console.log(sum2);\r\n\r\n  // const fisher = sum1.toFixed(1) / sum2.toFixed(1);\r\n  // console.log(fisher);\r\n\r\n  // return fisher.toFixed(3);\r\n};\r\n\r\nclass Home extends Component {\r\n  state = {\r\n    observed: {\r\n      row1: [\"Observed\", \"\", \"\", \"Totals\"],\r\n      row2: [\"\", null, null, null],\r\n      row3: [\"\", null, null, null],\r\n      row4: [\"Totals\", null, null, null]\r\n    },\r\n    expected: {\r\n      row1: [\"Expected\", \"\", \"\", \"Totals\"],\r\n      row2: [\"\", null, null, null],\r\n      row3: [\"\", null, null, null],\r\n      row4: [\"Totals\", null, null, null]\r\n    },\r\n\r\n    relative: {\r\n      row1: [\"Relative (%)\", \"\", \"\"],\r\n      row2: [\"\", null, null],\r\n      row3: [\"\", null, null],\r\n      row4: [\"Totals\", null, null]\r\n    },\r\n\r\n    residual: {\r\n      row1: [\"Residual\", \"\", \"\"],\r\n      row2: [\"\", null, null],\r\n      row3: [\"\", null, null]\r\n    },\r\n\r\n    chisquare: {\r\n      row1: [\"Chi-square\", null, null ]\r\n    },\r\n\r\n    phisquare: {\r\n      row1: [\"Phi-square\", null]\r\n    },\r\n\r\n    fisher: {\r\n      row1: [\"Fisher Exact Test(one-tailed)\", null]\r\n    },\r\n\r\n    step: 0\r\n  };\r\n\r\n  setValues = (e, columnIndex, index) => {\r\n    let { observed } = this.state;\r\n    let newRow = observed[`row${columnIndex}`];\r\n    newRow[index] = e.target.value;\r\n\r\n    observed[`row${columnIndex}`] = [...newRow];\r\n\r\n    this.setState({\r\n      observed\r\n    });\r\n  };\r\n\r\n  onSumExpected = () => {\r\n    let {\r\n      observed: o,\r\n      expected: e,\r\n      relative: rel,\r\n      residual: r,\r\n      chisquare: chi,\r\n      phisquare: phi,\r\n      fisher: fish\r\n      \r\n    } = this.state;\r\n\r\n    // totals\r\n\r\n    o.row2[3] = sumStrings(o.row2[1], o.row2[2]);\r\n    o.row3[3] = sumStrings(o.row3[1], o.row3[2]);\r\n    o.row4[3] = sumStrings(o.row4[1], o.row4[2]);\r\n\r\n    o.row4[1] = sumStrings(o.row2[1], o.row3[1]);\r\n    o.row4[2] = sumStrings(o.row2[2], o.row3[2]);\r\n    o.row4[3] = sumStrings(o.row4[1], o.row4[2]);\r\n\r\n    // expected\r\n    e.row2[1] = getExpected(o.row4[1], o.row2[3], o.row4[3]);\r\n    e.row2[2] = getExpected(o.row4[2], o.row2[3], o.row4[3]);\r\n\r\n    e.row3[1] = getExpected(o.row4[1], o.row3[3], o.row4[3]);\r\n    e.row3[2] = getExpected(o.row4[2], o.row3[3], o.row4[3]);\r\n\r\n    // relative\r\n    rel.row2[1] = getRelative(o.row2[1], o.row4[3]);\r\n    rel.row2[2] = getRelative(o.row2[2], o.row4[3]);\r\n\r\n    rel.row3[1] = getRelative(o.row3[1], o.row4[3]);\r\n    rel.row3[2] = getRelative(o.row3[2], o.row4[3]);\r\n\r\n    //relativesums\r\n    rel.row2[3] = getRelative(rel.row2[1], rel.row2[2]);\r\n    rel.row3[3] = getRelative(rel.row3[1], rel.row3[2]);\r\n\r\n    rel.row4[1] = getRelative(rel.row2[1], rel.row2[2]);\r\n    rel.row4[2] = getRelative(rel.row3[1], rel.row3[2]);\r\n\r\n    rel.row4[3] = getRelative(rel.row4[1], rel.row4[2]);\r\n\r\n    // residual\r\n    r.row2[1] = getResidual(o.row2[1], e.row2[1], e.row2[1]);\r\n    r.row2[2] = getResidual(o.row2[2], e.row2[2], e.row2[2]);\r\n\r\n    r.row3[1] = getResidual(o.row3[1], e.row3[1], e.row3[1]);\r\n    r.row3[2] = getResidual(o.row3[2], e.row3[2], e.row3[2]);\r\n\r\n    // chisquare\r\n    chi.row1[1] = getChisquare(r.row2[1], r.row2[2], r.row3[1], r.row3[2]);\r\n    chi.row1[2] = isSignificant(chi.row1[1]);\r\n    \r\n\r\n    // phisquare\r\n    phi.row1[1] = getPhisquare(chi.row1[1], o.row4[3]);\r\n\r\n    // fisher\r\n    fish.row1[1] = getFisher(\r\n      o.row2[1],\r\n      o.row2[2],\r\n      o.row3[1],\r\n      o.row3[2],\r\n      e.row4[3]\r\n    );\r\n    console.log(fish.row1[1]);\r\n\r\n    this.setState({\r\n      observed: o,\r\n      expected: e,\r\n      relative: rel,\r\n      residual: r,\r\n      chisquare: chi,\r\n      phisquare: phi,\r\n      fisher: fish,\r\n      step: 1\r\n    });\r\n  };\r\n\r\n  render() {\r\n    console.log(this.state);\r\n    const {\r\n      observed: o,\r\n      expected: e,\r\n      relative: rel,\r\n      residual: r,\r\n      chisquare: chi,\r\n      phisquare: phi,\r\n      fisher: fish,\r\n      step\r\n    } = this.state;\r\n\r\n    return (\r\n      <div class={style.home}>\r\n        <table>\r\n          <tbody>\r\n            <tr>\r\n              <td>\r\n                <input disabled value={o.row1[0]} />\r\n              </td>\r\n              <td>\r\n                <input\r\n                  type=\"text\"\r\n                  value={o.row1[1]}\r\n                  onChange={e => this.setValues(e, 1, 1)}\r\n                />\r\n              </td>\r\n              <td>\r\n                <input\r\n                  type=\"text\"\r\n                  value={o.row1[2]}\r\n                  onChange={e => this.setValues(e, 1, 2)}\r\n                />\r\n              </td>\r\n              <td>\r\n                <input type=\"text\" disabled value={o.row1[3]} />\r\n              </td>\r\n            </tr>\r\n\r\n            <tr>\r\n              <td>\r\n                <input\r\n                  type=\"text\"\r\n                  value={o.row2[0]}\r\n                  onChange={e => this.setValues(e, 2, 0)}\r\n                />\r\n              </td>\r\n              <td>\r\n                <input\r\n                  type=\"number\"\r\n                  value={o.row2[1]}\r\n                  onChange={e => this.setValues(e, 2, 1)}\r\n                />\r\n              </td>\r\n              <td>\r\n                <input\r\n                  type=\"number\"\r\n                  value={o.row2[2]}\r\n                  onChange={e => this.setValues(e, 2, 2)}\r\n                />\r\n              </td>\r\n              <td>\r\n                <input type=\"number\" disabled value={o.row2[3]} />\r\n              </td>\r\n            </tr>\r\n\r\n            <tr>\r\n              <td>\r\n                <input\r\n                  type=\"text\"\r\n                  value={o.row3[0]}\r\n                  onChange={e => this.setValues(e, 3, 0)}\r\n                />\r\n              </td>\r\n              <td>\r\n                <input\r\n                  type=\"number\"\r\n                  value={o.row3[1]}\r\n                  onChange={e => this.setValues(e, 3, 1)}\r\n                />\r\n              </td>\r\n              <td>\r\n                <input\r\n                  type=\"number\"\r\n                  value={o.row3[2]}\r\n                  onChange={e => this.setValues(e, 3, 2)}\r\n                />\r\n              </td>\r\n              <td>\r\n                <input type=\"text\" disabled value={o.row3[3]} />\r\n              </td>\r\n            </tr>\r\n\r\n            <tr>\r\n              <td>\r\n                <input type=\"text\" disabled value={o.row4[0]} />\r\n              </td>\r\n              <td>\r\n                <input type=\"number\" disabled value={o.row4[1]} />\r\n              </td>\r\n              <td>\r\n                <input type=\"number\" disabled value={o.row4[2]} />\r\n              </td>\r\n              <td>\r\n                <input type=\"number\" disabled value={o.row4[3]} />\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n        <br />\r\n        <button onClick={this.onSumExpected}>Calculate Chi-Square Value</button>\r\n        <br />\r\n        <br />\r\n\r\n        {/* EXPECTED */}\r\n\r\n        {step == 1 && (\r\n          <table>\r\n            <tbody>\r\n              <tr>\r\n                <td>\r\n                  <input disabled value={e.row1[0]} />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    disabled\r\n                    value={o.row1[1]}\r\n                    onChange={e => this.setValues(e, 1, 1)}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    disabled\r\n                    value={o.row1[2]}\r\n                    onChange={e => this.setValues(e, 1, 2)}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input type=\"text\" disabled value={o.row1[3]} />\r\n                </td>\r\n              </tr>\r\n\r\n              <tr>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    disabled\r\n                    value={o.row2[0]}\r\n                    onChange={e => this.setValues(e, 2, 0)}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input type=\"number\" disabled value={e.row2[1]} />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type=\"number\"\r\n                    disabled\r\n                    value={e.row2[2]}\r\n                    onChange={e => this.setValues(e, 2, 2)}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input type=\"number\" disabled value={o.row2[3]} />\r\n                </td>\r\n              </tr>\r\n\r\n              <tr>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    disabled\r\n                    value={o.row3[0]}\r\n                    onChange={e => this.setValues(e, 3, 0)}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input type=\"number\" disabled value={e.row3[1]} />\r\n                </td>\r\n                <td>\r\n                  <input type=\"number\" disabled value={e.row3[2]} />\r\n                </td>\r\n                <td>\r\n                  <input type=\"text\" disabled value={o.row3[3]} />\r\n                </td>\r\n              </tr>\r\n\r\n              <tr>\r\n                <td>\r\n                  <input type=\"text\" disabled value={o.row4[0]} />\r\n                </td>\r\n                <td>\r\n                  <input type=\"number\" disabled value={o.row4[1]} />\r\n                </td>\r\n                <td>\r\n                  <input type=\"number\" disabled value={o.row4[2]} />\r\n                </td>\r\n                <td>\r\n                  <input type=\"number\" disabled value={o.row4[3]} />\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        )}\r\n        <br />\r\n\r\n        {/* RELATIVE */}\r\n\r\n        {step == 1 && (\r\n          <table>\r\n            <tbody>\r\n              <tr>\r\n                <td>\r\n                  <input disabled value={rel.row1[0]} />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    disabled\r\n                    value={o.row1[1]}\r\n                    onChange={rel => this.setValues(rel, 1, 1)}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    disabled\r\n                    value={o.row1[2]}\r\n                    onChange={e => this.setValues(e, 1, 2)}\r\n                  />\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    disabled\r\n                    value={o.row2[0]}\r\n                    onChange={e => this.setValues(e, 2, 0)}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input type=\"number\" disabled value={rel.row2[1]} />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type=\"number\"\r\n                    disabled\r\n                    value={rel.row2[2]}\r\n                    onChange={rel => this.setValues(rel, 2, 2)}\r\n                  />\r\n                </td>\r\n              </tr>\r\n\r\n              <tr>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    disabled\r\n                    value={o.row3[0]}\r\n                    onChange={e => this.setValues(e, 3, 0)}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input type=\"number\" disabled value={rel.row3[1]} />\r\n                </td>\r\n                <td>\r\n                  <input type=\"number\" disabled value={rel.row3[2]} />\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        )}\r\n        <br />\r\n\r\n        {/* RESIDUAL */}\r\n\r\n        {step == 1 && (\r\n          <table>\r\n            <tbody>\r\n              <tr>\r\n                <td>\r\n                  <input disabled value={r.row1[0]} />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    disabled\r\n                    value={o.row1[1]}\r\n                    onChange={e => this.setValues(e, 1, 1)}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    disabled\r\n                    value={o.row1[2]}\r\n                    onChange={e => this.setValues(e, 1, 2)}\r\n                  />\r\n                </td>\r\n              </tr>\r\n\r\n              <tr>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    disabled\r\n                    value={o.row2[0]}\r\n                    onChange={e => this.setValues(e, 2, 0)}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input type=\"number\" disabled value={r.row2[1]} />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type=\"number\"\r\n                    disabled\r\n                    value={r.row2[2]}\r\n                    onChange={r => this.setValues(r, 2, 2)}\r\n                  />\r\n                </td>\r\n              </tr>\r\n\r\n              <tr>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    disabled\r\n                    value={o.row3[0]}\r\n                    onChange={e => this.setValues(e, 3, 0)}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input type=\"number\" disabled value={r.row3[1]} />\r\n                </td>\r\n                <td>\r\n                  <input type=\"number\" disabled value={r.row3[2]} />\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        )}\r\n        <br />\r\n\r\n        {/* chisquare */}\r\n\r\n        {step == 1 && (\r\n          <table>\r\n            <tbody>\r\n              <tr>\r\n                <td>\r\n                  <input disabled value={chi.row1[0]} />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type=\"text\" disabled value={chi.row1[1]}  \r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type=\"text\" disabled value={chi.row1[2]}  \r\n                  />\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        )}\r\n\r\n        {/* phisquare */}\r\n\r\n        {step == 1 && (\r\n          <table>\r\n            <tbody>\r\n              <tr>\r\n                <td>\r\n                  <input disabled value={phi.row1[0]} />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    disabled\r\n                    value={phi.row1[1]}\r\n                    onChange={phi => this.setValues(phi, 1, 1)}\r\n                  />\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        )}\r\n\r\n        {/* fisher test */}\r\n\r\n        {step == 1 && (\r\n          <table>\r\n            <tbody>\r\n              <tr>\r\n                <td>\r\n                  <input disabled value={fish.row1[0]} />\r\n                </td>\r\n                <td>\r\n                  <input type=\"text\" disabled value={fish.row1[1]} />\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n\n\n\n// WEBPACK FOOTER //\n// ./routes/home/index.js","/*\n * bigbinom\n * https://github.com/sackio/bigbinom\n *\n * Copyright (c) 2014 Ben Sack\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nvar BigNumber = require('bignumber.js');\n\nmodule.exports = function(n, k){\n  if (k > n) return new BigNumber(0);\n  if (n === k) return new BigNumber(1);\n  if (k > n - k) k = n - k;\n\n  var cf = new BigNumber(1);\n  for (var i = 1; i <= k; i++){\n    cf = cf.times(n--);\n    cf = cf.dividedBy(i);\n  }\n\n  return cf;\n};\n\n\n\n// WEBPACK FOOTER //\n// ../node_modules/bigbinom/lib/bigbinom.js",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v8.1.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    hasSymbol = typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol',\r\n\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if only one character,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.$|[+-.\\s]|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '1e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (hasSymbol) {\r\n      P[Symbol.toStringTag] = 'BigNumber';\r\n\r\n      // Node.js v10.12.0+\r\n      P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n    }\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n\n\n\n// WEBPACK FOOTER //\n// ../node_modules/bignumber.js/bignumber.js"],"sourceRoot":""}